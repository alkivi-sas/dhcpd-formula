# dhcpd.conf
#
# SaltStack-generated configuration file for ISC dhcpd
#

{% set customized = {} %}
{%- set types_to_quote = ['string', 'text'] -%}
{%- set quote = '' -%}
{%- set dquote = '"' -%}
{% if dhcpd_config.get('customized_options', False) -%}
{%- set customized = dhcpd_config.get('customized_options', {}) %}
# Customized dhcp options
  {%- for name, data in customized.items() %}
option {{ name|replace('_', '-') }} code {{ data.code }} = {{ data.type }};
  {%- endfor %}
{% endif -%}

# option definitions common to all supported networks...
{% if dhcpd_config.get('domain_name', False) -%}
option domain-name "{{ dhcpd_config.get('domain_name') }}";
{% endif -%}
{% if dhcpd_config.get('domain_name_servers', False) -%}
option domain-name-servers
  {%- for dns_server in dhcpd_config.get('domain_name_servers') %} {{ dns_server }}
    {%- if not loop.last %}, {% else %};{% endif %}
  {%- endfor %}
{% endif -%}

{% if dhcpd_config.get('default_lease_time', False) -%}
default-lease-time {{ dhcpd_config.get('default_lease_time') }};
{% endif -%}
{% if dhcpd_config.get('max_lease_time', False) -%}
max-lease-time {{ dhcpd_config.get('max_lease_time') }};
{% endif -%}
{% if dhcpd_config.get('one_lease_per_client', False) -%}
one-lease-per-client {{ dhcpd_config.get('one_lease_per_client') }};
{% endif -%}
{% if dhcpd_config.get('get_lease_hostnames', False) -%}
get-lease-hostnames {{ dhcpd_config.get('get_lease_hostnames') }};
{% endif -%}
{% if dhcpd_config.get('server_identifier') -%}
server-identifier {{ dhcpd_config.get('server_identifier') }};
{% endif -%}
{% if dhcpd_config.get('server_name') -%}
server-name {{ dquote }}{{ dhcpd_config.get('server_name') }}{{ dquote }};
{% endif -%}
{%- if dhcpd_config.get('allow', False) %}
allow {{ dhcpd_config.get('allow') }};
{%- elif dhcpd_config.get('deny', False) %}
deny {{ dhcpd_config.get('deny') }};
{%- endif %}
{%- if 'use_host_decl_names' in dhcpd_config %}
use-host-decl-names {{ dhcpd_config.get('use_host_decl_names') }};
{%- endif %}
{%- if dhcpd_config.get('bootp', False) -%}
allow bootp;
{% endif -%}
{% if dhcpd_config.get('booting', False) -%}
allow booting;
{% endif -%}
{% if dhcpd_config.get('filename', False) -%}
filename "{{ dhcpd_config.get('filename') }}";
{% endif -%}
{% if dhcpd_config.get('next-server', False) -%}
next-server "{{ dhcpd_config.get('next-server') }}";
{% endif -%}


# Use this to enble / disable dynamic dns updates globally.
{%- if dhcpd_config.get('ddns_update_style', False) %}
ddns-update-style {{ dhcpd_config.get('ddns_update_style') }};
{%- else %}
#ddns-update-style none;
{%- endif %}

# If this DHCP server is the official DHCP server for the local
# network, the authoritative directive should be uncommented.
{%- if dhcpd_config.get('authoritative', False) %}
authoritative;
{%- else %}
#authoritative;
{%- endif %}

# Use this to send dhcp log messages to a different log file (you also
# have to hack syslog.conf to complete the redirection).
{%- if dhcpd_config.get('log_facility', False) %}
log-facility {{ dhcpd_config.get('log_facility') }};
{%- endif %}

{%- for option in customized.keys() %}
  {%- if option in dhcpd_config %}
    {%- if customized[option]['type'] in types_to_quote %} {% set quote = dquote %} {%- endif %}
option {{ option|replace('_', '-') }} {{ quote }}{{ dhcpd_config.get(option) }}{{ quote }};
  {%- endif %}
{%- endfor %}

{%- for failover_peer, config in dhcpd_config.get('failover_peers', {}).items() %}
  {%- if 'comment' in config %}
    {%- for line in config.comment.splitlines() %}
# {{ line }}
    {%- endfor %}
  {%- endif %}
failover peer "{{ failover_peer }}" {
  {%- if 'primary' in config %}
  primary;
  {%- elif 'secondary' in config %}
  secondary;
  {%- endif %}
  {%- if 'address' in config %}
  address {{ config.address }};
  {%- endif %}
  {%- if 'port' in config %}
  port {{ config.port }};
  {%- endif %}
  {%- if 'peer_address' in config %}
  peer address {{ config.peer_address }};
  {%- endif %}
  {%- if 'peer_port' in config %}
  peer port {{ config.port }};
  {%- endif %}
  {%- if 'max_response_delay' in config %}
  max-response-delay {{ config.max_response_delay }};
  {%- endif %}
  {%- if 'max_unacked_updates' in config %}
  max-unacked-updates {{ config.max_unacked_updates }};
  {%- endif %}
  {%- if 'mclt' in config %}
  mclt {{ config.mclt }};
  {%- endif %}
  {%- if 'split' in config %}
  split {{ config.split }};
  {%- elif 'hba' in config %}
  hba {{ config.hba }};
  {%- endif %}
  {%- if 'load_balance_max_seconds' in config %}
  load balance max seconds {{ config.load_balance_max_seconds }};
  {%- endif %}
  {%- if 'max_lease_misbalance' in config %}
  max-lease-misbalance {{ config.max_lease_misbalance }};
  {%- endif %}
  {%- if 'max_lease_ownership' in config %}
  max-lease-ownership {{ config.max_lease_ownership }};
  {%- endif %}
  {%- if 'min_balance' in config %}
  min-balance {{ config.min_balance }};
  {%- endif %}
  {%- if 'max-balance' in config %}
  max-balance {{ config.max_balance }};
  {%- endif %}
}
{%- endfor %}

{%- set intendation='' %}
{%- for subnet, config in dhcpd_config.get('subnets', {}).items() %}
{%- include 'dhcpd/templates/subnet.jinja' with context %}
{%- endfor %}

{% for host, config in dhcpd_config.get('hosts', {}).items() %}
  {%- if 'comment' in config %}
    {%- for line in config.comment.splitlines() %}
# {{ line }}
    {%- endfor %}
  {%- endif %}
host {{ host }} {
  {%- if 'allow' in config %}
  allow {{ config.allow }};
  {%- elif 'deny' in config %}
  deny {{ config.deny }};
  {%- endif %}
  {%- if 'hardware' in config %}
  hardware {{ config.hardware }};
  {%- endif %}
  {%- if 'fixed_address' in config %}
  fixed-address {{ config.fixed_address }};
  {%- endif %}
  {%- if 'filename' in config %}
  filename "{{ config.filename }}";
  {%- endif %}
  {%- if 'server_name' in config %}
  server-name "{{ config.server_name }}";
  {%- endif %}
  {%- if 'host_name' in config %}
  option host-name "{{ config.host_name }}";
  {%- endif %}
  {%- for option in customized.keys() %}
    {%- if option in config %}
     {%- if customized[option]['type'] in types_to_quote %} {% set quote = dquote %} {%- endif %}
  option {{ option|replace('_', '-') }} {{ quote }}{{ config.get(option) }}{{ quote }};
    {%- endif %}
  {%- endfor %}
}
{% endfor %}
{%- for class, config in dhcpd_config.get('classes', {}).items() %}
  {%- if 'comment' in config %}
    {%- for line in config.comment.splitlines() %}
# {{ line }}
    {%- endfor %}
  {%- endif %}
class "{{ class }}" {
  {%- if 'match' in config %}
  match {{ config.match }};
  {%- endif %}
  {%- for option in customized.keys() %}
    {%- if option in config %}
     {%- if customized[option]['type'] in types_to_quote %} {% set quote = dquote %} {%- endif %}
  option {{ option|replace('_', '-') }} {{ quote }}{{ config.get(option) }}{{ quote }};
    {%- endif %}
  {%- endfor %}
}
{% endfor %}
{%- for shared_network, config in dhcpd_config.get('shared_networks', {}).items() %}
  {%- if 'comment' in config %}
    {%- for line in config.comment.splitlines() %}
# {{ line }}
    {%- endfor %}
  {%- endif %}
shared-network {{ shared_network }} {
{%- set intendation='  ' %}
  {%- for subnet, config in salt['pillar.get'](
      'dhcpd:shared_networks:{0}:subnets'.format(shared_network), {}).items() %}
    {%- include 'dhcpd/files/subnet.jinja' with context %}
  {%- endfor %}
  {%- for pool in salt['pillar.get'](
      'dhcpd:shared_networks:{0}:pools'.format(shared_network), []) %}
  pool {
    {%- if 'allow' in pool %}
    allow {{ pool.allow }};
    {%- elif 'deny' in pool %}
    deny {{ pool.deny }};
    {%- endif %}
    {%- if 'range' in pool %}
    range {{ pool.range[0] }} {{ pool.range[1] }};
    {%- endif %}
  }
  {%- endfor %}
  {%- for option in customized.keys() %}
    {%- if option in config %}
     {%- if customized[option]['type'] in types_to_quote %} {% set quote = dquote %} {%- endif %}
  option {{ option|replace('_', '-') }} {{ quote }}{{ config.get(option) }}{{ quote }};
    {%- endif %}
  {%- endfor %}
}
{%- endfor %}
